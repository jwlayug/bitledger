/*
 * Copyright 2014 Bitledger
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        // see configuration of the 'artifactory-publish' plugin below
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:2.2.4'
    }
}

apply plugin: 'java'

version = '0.1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    jcenter()
}

dependencies {
    compile 'commons-codec:commons-codec:1.9'
    compile 'org.projectlombok:lombok:1.12.6'
    compile 'org.zeromq:jeromq:0.3.4'
    compile 'com.google.guava:guava:17.0'
    testCompile 'junit:junit:4.11'
    testCompile 'org.mockito:mockito-core:1.9.5'
}

javadoc {
    title = "Bitledger ${version} API"
    options.header = title
    options.author = true
}


// ----------------------------------------------------------------------------
// Configure additional artifacts to be created during `gradle assemble`
// ----------------------------------------------------------------------------
task sourceJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}


// ----------------------------------------------------------------------------
// Configure publication of Maven-compatible artifacts and metadata
// ----------------------------------------------------------------------------
apply plugin: 'maven-publish'

group = 'bit.ledger'

publishing {
    publications {
        main(MavenPublication) {
            from components.java

            artifact sourceJar {
                classifier 'sources'
            }

            artifact javadocJar {
                classifier 'javadoc'
            }

            pom.withXml {

                // publish metadata required for inclusion in the Central Repository
                asNode().with {
                    appendNode('packaging', 'jar')
                    appendNode('name', project.name)
                    appendNode('description', 'A toolkit for building Bitcoin-like systems on the JVM')
                    appendNode('url', 'http://bitledger.io')
                    appendNode('licenses').with {
                        appendNode('license').with {
                            appendNode('name', 'The Apache Software License, Version 2.0')
                            appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0')
                        }
                    }
                    appendNode('developers').with {
                        appendNode('developer').with {
                            appendNode('id', 'cbeams')
                            appendNode('name', 'Chris Beams')
                            appendNode('email', 'chris@beams.io')
                        }
                    }
                    appendNode('scm').with {
                        appendNode('connection', 'git@github.com:cbeams/bitledger.git')
                        appendNode('developerConnection', 'git@github.com:cbeams/bitledger.git')
                        appendNode('url', 'https://github.com/cbeams/bitledger')
                    }
                }

                // work around a bug the gradle-artifactory-plugin that causes compile-time dependencies to be published
                // as runtime dependencies
                asNode().dependencies.'*'.findAll() {
                    it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
                        dep.name == it.artifactId.text()
                    }
                }.each() {
                    it.scope*.value = 'compile'
                }
            }
        }
    }
}


// ----------------------------------------------------------------------------
// Configure publication of snapshots to Artifactory
// ----------------------------------------------------------------------------
apply plugin: 'artifactory-publish'

task publishSnapshot {
    dependsOn check, artifactoryPublish
}

artifactoryPublish.mustRunAfter check

artifactory {
    contextUrl = 'https://oss.jfrog.org'
    resolve {
        repository {
            repoKey = 'libs-release'
        }
    }
    publish {
        repository {
            repoKey = 'oss-snapshot-local'
            username = project.hasProperty('bintrayUser') ? project.bintrayUser : 'missing_bintrayUser'
            password = project.hasProperty('bintrayKey') ? project.bintrayKey : 'missing_bintrayKey'
        }
        defaults {
            publications 'main' // see publishing.publications.main in 'publish-maven' configuration
        }
    }
}


// ----------------------------------------------------------------------------
// Support import and export of shared IDEA settings
// ----------------------------------------------------------------------------
task ideaSettingsJar(type: Jar) {
    description = 'Creates a settings archive suitable for import into IDEA'
    from '.idea/exported_settings'
    archiveName 'idea-settings.jar'
    doLast {
        print """
        Wrote idea settings jar at ${archivePath}
        Import this file into IDEA using File > Import Settings...
        See .idea/exported_settings/README.md for further instructions
        """
    }
}

task unzipIdeaSettingsJar(type: Copy) {
    description = 'Unzips an exported IDEA settings archive'
    from(zipTree("${rootDir}/settings.jar"))
    into('.idea/exported_settings')
    outputs.upToDateWhen { false }
}


// ----------------------------------------------------------------------------
// Configure the Gradle wrapper
// ----------------------------------------------------------------------------
wrapper.gradleVersion = '1.12'
